@model INFM201.Models.Reservation

@{
    ViewBag.Title = "Create Reservation";
}

<h2 class="text-center">Create Reservation</h2>

@using (Html.BeginForm("Create", "Reservations", FormMethod.Post, new { id = "reservationForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" style="max-width: 600px; margin: auto; border: 1px solid #ccc; padding: 30px; border-radius: 8px; box-shadow: 2px 2px 10px #aaa; background-color: #f9f9f9;">
        <h4 class="text-center">Reservation Details</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.CFullnames, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.CFullnames, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CFullnames, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CEmail, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.CEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", type = "date", min = DateTime.Now.ToString("yyyy-MM-dd") } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Time, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Time, new { htmlAttributes = new { @class = "form-control", type = "time" } })
                @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NumberOfGuests, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <select class="form-control" id="NumberOfGuests" name="NumberOfGuests">
                    <option value="">Select no. of guests.</option>
                    <option value="1">1 person</option>
                    <option value="2">2 people</option>
                    <option value="3">3 people</option>
                    <option value="4">4 people</option>
                    <option value="5">5 people</option>
                    <option value="6">6 people</option>
                    <option value="7" disabled>For larger booking, please phone restaurant</option>
                </select>
                @Html.ValidationMessageFor(model => model.NumberOfGuests, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SeatingPreference, "Seating Preference", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownListFor(model => model.SeatingPreference, new SelectList(new List<SelectListItem>
                {
                    new SelectListItem { Text = "Inside - Couch/Lounge", Value = "Inside - Couch/Lounge" },
                    new SelectListItem { Text = "Inside - Table", Value = "Inside - Table" },
                    new SelectListItem { Text = "Outside", Value = "Outside" }
                }, "Value", "Text"), "Select Seating Preference", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SeatingPreference, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-3"></div>
            <div class="col-md-9">
                <label for="hasSpecialRequests">Do you have any special requests?</label>
                <input type="checkbox" id="hasSpecialRequests" name="hasSpecialRequests" value="true" onchange="toggleSpecialRequest()" />
                <textarea id="specialRequestField" class="form-control" name="SpecialRequests" disabled></textarea>
                @Html.ValidationMessageFor(model => model.SpecialRequests, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-3"></div>
            <div class="col-md-9">
                <input type="submit" value="Submit" class="btn btn-primary btn-block" />
            </div>
        </div>
    </div>
}

<!-- Popup for confirmation -->
<div id="confirmationPopup" class="popup-overlay" role="dialog" aria-labelledby="popupTitle" aria-modal="true" style="display:none;">
    <div class="popup-content">
        <h3 id="popupTitle">Success!</h3>
        <p>Your reservation has been successfully created! A confirmation email has been sent. You have been assigned to: <strong>@TempData["TableNumber"]</strong>.</p>
        <button onclick="redirectHome()">OK</button>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        // Show the confirmation popup only if the reservation was successful
        $(document).ready(function () {
            @if (TempData["ReservationSuccess"] != null && (bool)TempData["ReservationSuccess"])
            {
                <text>
                    $("#confirmationPopup").fadeIn();
                    setTimeout(function() {
                        redirectHome(); // Automatically redirect after 10 seconds
                    }, 10000); // 10000 milliseconds = 10 seconds
                </text>
            }

            // Close popup when clicking outside of it
            $(".popup-overlay").click(function(event) {
                if ($(event.target).is(".popup-overlay")) {
                    $(this).fadeOut(); // Hide popup
                    redirectHome(); 
                }
            });
        });

        // Special request toggle logic
        function toggleSpecialRequest() {
            var checkbox = document.getElementById("hasSpecialRequests");
            var textArea = document.getElementById("specialRequestField");
            if (checkbox.checked) {
                textArea.disabled = false;
                textArea.placeholder = "Enter your special request here...";
                textArea.value = ""; 
            } else {
                textArea.disabled = true; 
                textArea.value = ""; 
                textArea.placeholder = ""; 
            }
        }

        function redirectHome() {
            window.location.href = '@Url.Action("Index", "Home")'; // Redirect to home page
        }
    </script>

    <style>
        .popup-overlay {
            position: fixed;
            top: 5%;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .popup-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            text-align: center;
        }

            .popup-content h3 {
                margin-bottom: 15px;
            }

            .popup-content p {
                margin-bottom: 20px;
            }

            .popup-content button {
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                background-color: #007bff;
                color: white;
                cursor: pointer;
            }

                .popup-content button:hover {
                    background-color: #0056b3;
                }

        .form-group {
            display: flex;
            justify-content: space-between; 
        }

        .control-label {
            flex: 0 0 30%; 
            text-align: left; 
        }

        .col-md-9 {
            flex: 1; 
        }
    </style>
}
